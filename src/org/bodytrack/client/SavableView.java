package org.bodytrack.client;

import com.google.gwt.core.client.JavaScriptObject;

/**
 * A class representing a view and the information that needs to be saved
 * or restored.
 *
 * <p>A <tt>SavableView</tt> is represented as a JSON dictionary.  One
 * required field is name, which has a non-null, nonempty string as its
 * value.  Another required field is x_axes, which has a list as its value.
 * Each element of this list should be a dictionary, with two keys, min_time
 * and max_time.  Each of these values is a number representing seconds
 * since the epoch.  A third required field is channels.  The value for
 * this should be a dictionary, with device names as keys.  Each device name
 * points to a nonempty dictionary, with channel names as keys.  Each
 * channel name points to a dictionary, with required keys x_axis, min_val,
 * and max_val.  The x_axis key has a nonnegative integer value, which
 * points to the index in x_axes to use for the x-axis on that channel name
 * (indices start at 0).  The min_val and max_val values should be numeric,
 * representing the axis bounds on the new channel's Y-axis.</p>
 */
public class SavableView extends JavaScriptObject {
	/* JavaScript overlay types always have protected empty constructors */
	protected SavableView() {}

	/**
	 * Returns a single SavableView, given a JSON string containing the data.
	 *
	 * <h2 style="color: red">WARNING:</h2>
	 *
	 * <p>Note that the JSON string is assumed to be trusted.  This method uses
	 * the JavaScript eval() function, <strong>which could allow arbitrary
	 * code to execute on a user's browser</strong> if this string was not
	 * completely generated by BodyTrack servers over a secure connection.
	 * This could allow an attacker to view all of a user's data, simply by
	 * filling in code to request all valid data tiles and then to send
	 * those tiles to the attacker's machine.  As such, data from insecure
	 * connections, and especially from cross-site requests, should not be
	 * passed in as the data parameter here.</p>
	 *
	 * @param json
	 * 		a JSON string containing data for a single tile
	 * @return
	 * 		a SavableView object with the same data as is found in json
	 */
	public static native SavableView buildView(String json) /*-{
		eval("var view = " + json);
		return view;
	}-*/;

	/**
	 * Returns the name for this view.
	 *
	 * @return
	 * 		the value of the name field in the native object
	 */
	public native String getName() /*-{
		return this.name;
	}-*/;

	/**
	 * Returns the number of X-axes for this object.
	 *
	 * @return
	 * 		the number of X-axes for this object
	 */
	public native int countXAxes() /*-{
		return this.x_axes.length;
	}-*/;

	// TODO: implement getters for the remaining fields
	// TODO: implement conversion methods between a SavableView and
	// a ChannelManager
}
